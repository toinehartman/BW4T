init module {
	knowledge {
		% A room is a place with exactly one neighbour, i.e., there is only one way to get to and from that place.
		room(PlaceID) :- zone(_,PlaceID,_,_,Neighbours), length(Neighbours,1).
		
		% Exercise 2.2: insert a definition of the predicate "nextColorInSeq(Color)".
		nextColorInSeq(Color) :- sequenceIndex(Index), sequence(Colors), nth0(Index, Colors, Color).
		
		% Exercise 2.5 + 2.6: (optional) if needed, insert additional knowledge here.
		
	}
	program {
		% Store map information, i.e., navigation points in the agent's belief base.
		forall bel( percept(zone(ID, Name, X, Y, Neighbours)) ) do insert( zone(ID, Name, X, Y, Neighbours) ).

		% Record the initial state of movement in belief base.
		if bel( percept(state(State)) ) then insert( state(State) ).
		
		% Adopt initial goals.
		forall bel( room(Place) ) do adopt( in(Place) ).

		% Exercise 2.1a: insert rules for processing percepts that are sent only at the beginning of a session, 
		%  and/or need to be initialized.
		
		%% Send-once percepts
		
		% Insert the wanted sequence of block colors in the beliefs. Necessary to deliver in order later.
		if bel( percept(sequence(Colors)) ) then insert( sequence(Colors) ).
		
		% Insert all places
		forall bel( percept(place(Place)) ) do insert( place(Place) ).
		
		%% Initialization
		
		% Initialize sequenceIndex a.k.a. progress of collecting blocks
		if bel( percept(sequenceIndex(N)) ) then insert( sequenceIndex(N) ).
	}	
	actionspec {
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		goTo(Location) {
            pre { place(Location), not(state(traveling))) } % , not(state(traveling) ??
			post { true }
		}

		% Exercise 2.3a: insert a specification for the goToBlock(Block) action.
		goToBlock(Block) {
			pre { percept(color(Block, _)) }
			post { true }	
		}
		
		% Exercise 2.3b: insert a specification for the pickUp action.
		pickUp {
			pre { atBlock(Block), not(holding(_)) }
			post { not(atBlock(Block)), holding(Block) }	
		}
		
		% Exercise 2.3c: insert a specification for the putDown action.
		putDown {
			pre { holding(Block) }
			post { not(holding(Block)) }	
		}
	}
}

main module [exit=nogoals] {
	program {
		if a-goal( in(Place) ) then goTo(Place).

		% Exercise 2.5a: insert code for action rules that allows an agent to systematically search for blocks.

		% Exercise 2.6a: insert code for action rules that makes the agent deliver a block when it 
		%   knows about a block that can be delivered.
		
	}
}

event module {
	program {
	    % Update the agent's state of movement.
		forall bel( state(State), percept(state(NewState)) ) do delete( state(State) ) + insert( state(NewState) ).
		
		% Record when we are entering or leaving a room.
		forall bel( percept(in(Place)) ) do insert( in(Place) ).
		forall bel( percept(not(in(Place))) ) do delete( in(Place) ).

		% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.
		
		% Record in which area we are
		if bel( at(Place), percept(at(NewPlace)) ) then delete( at(Place) ) + insert( at(Place) ).
		
		% Track the progress of collecting blocks (i.e. the index of the next block to collect in the list)
		if bel( sequenceIndex(M), percept(sequenceIndex(N)) ) then delete( sequenceIndex(M) ) + insert( sequenceIndex(N) ).
		
		% Track which block the gripper is holding
		if bel( percept(holding(Block)) ) then insert( holding(Block) ).
		if bel( percept(not(holding(Block))) ) then delete( holding(Block) ).
		
		% Record when we are at the location of a block
		if bel( percept(atBlock(Block)) ) then insert( atBlock(Block) ).
		if bel( percept(not(atBlock(Block))) ) then delete( atBlock(Block) ).
		
		% Update which rooms are occupied
		forall bel( percept(occupied(Room)) ) do insert( occupied(Room) ).
		forall bel( percept(not(occupied(Room))) ) do delete( occupied(Room) ).
		
		% Remember the color of newly seen blocks
		forall bel( percept(color(Block, Color)) ) do insert( color(Block, Color) ).
		
		
		% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
		
		% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
		%   knows about a block that can be delivered. (if needed)
		
	}
}
