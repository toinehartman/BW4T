init module {
	knowledge {
		% A room is a place with exactly one neighbour, i.e., there is only one way to get to and from that place.
		room(PlaceID) :- zone(_,PlaceID,_,_,Neighbours), length(Neighbours,1).
		
		% Exercise 2.2: insert a definition of the predicate "nextColorInSeq(Color)".
		% The next Color in the sequence is the color on the nth place of the colors sequenceIndex.
		nextColorInSeq(Color) :- sequenceIndex(Index), sequence(Colors), nth0(Index, Colors, Color).
		
		% Exercise 2.5 + 2.6: (optional) if needed, insert additional knowledge here.
		
	}
	program {
		% Store map information, i.e., navigation points in the agent's belief base.
		forall bel( percept(zone(ID, Name, X, Y, Neighbours)) ) do insert( zone(ID, Name, X, Y, Neighbours) ).

		% Record the initial state of movement in belief base.
		if bel( percept(state(State)) ) then insert( state(State) ).
		
		% Adopt initial goals.
		forall bel( room(Place), Place \== 'DropZone' ) do adopt( in(Place) ).

		% Exercise 2.1a: insert rules for processing percepts that are sent only at the beginning of a session, 
		%  and/or need to be initialized.
		
		%% Send-once percepts
		
		% Insert the wanted sequence of block colors in the beliefs. Necessary to deliver in order later.
		% The agent should put his perceptions about the color sequence in his believe base.
		if bel( percept(sequence(Colors)) ) then insert( sequence(Colors) ).
		
		% Insert all places
		% The agent get his perceptions from the environment and inserts them.
		forall bel( percept(place(Place)) ) do insert( place(Place) ).
		
		%% Initialization
		
		% Initialize sequenceIndex a.k.a. progress of collecting blocks
		% The agent inserts the sequenceIndex, perceived from the environment.
		if bel( percept(sequenceIndex(N)) ) then insert( sequenceIndex(N) ).
		
		if bel( percept(at(Place)) ) then insert( at(Place) ).
	}	
	actionspec {
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		% Before the action the agent is at a location and not traveling. After the action the agent is at the location (or room).
		goTo(Location) {
            pre { place(Location), not(state(traveling))) } % , not(state(traveling) ??
			post { true }
		}

		% Exercise 2.3a: insert a specification for the goToBlock(Block) action.
		% Before the action the agent percepts a block and is not traveling. After the action the agent is at the block.
		goToBlock(Block) {
			pre { in(Room), block(Block, Room), not(state(traveling))) }
			post { true }
		}
		
		% Exercise 2.3b: insert a specification for the pickUp action.
		% Before the action the agent is at a block and not holding anything.
		% After the action the agent is not at the block anymore but holding the block.
		pickUp {
			pre { atBlock(Block), not(holding(_)) }
			post { not(atBlock(Block)), holding(Block) }	
		}
		
		% Exercise 2.3c: insert a specification for the putDown action.
		% Before the action the agent is holding a block
		% After the action the agent is not holding the block anymore.
		putDown {
			pre { holding(Block) }
			post { not(holding(Block)) }	
		}
	}
}

main module [exit=nogoals] {
	program [order=linear] {
		% Exercise 2.5a: insert code for action rules that allows an agent to systematically search for blocks.
		% if bel( room(Room), not(visited(Room)) ) then goTo(Room).
		% if bel( in(Room), block(Block, Room) ) then goToBlock(Block).

		% Exercise 2.6a: insert code for action rules that makes the agent deliver a block when it 
		%   knows about a block that can be delivered.
		
		% If the agent has the goal in('DropZone') and he is holding a block, he should go to the DropZone.
		if a-goal( in('DropZone') ), bel( holding(_) ) then goTo('DropZone').
		
		% If the agent is in the DropZone and he is holding a block, he should put it down and drop his current goal to hold the block.
		% Also the information about the delivered block will be deleted because the block is no longer in any room.
		if bel( in('DropZone'), holding(Block), color(Block, Color) ) then putDown + drop(holding(Block)) + delete(color(Block, Color)).
		
		% If the agent has the goal atBlock(Block), then he should go to this block.
		if a-goal( atBlock(Block) ) then goToBlock(Block).
		
		% If the agent has the goal holding(Block) and he is at the block in the room, he should pick the block up.
		% The agent also deletes the information about the block being in the room and adopts the new goal in('DropZone').
		if a-goal( holding(Block) ), bel( block(Block, Room), in(Room), atBlock(Block) ) then pickUp + delete( block(Block, Room) ) + adopt( in('DropZone') ).
		
		% If the agent has the goal holding(Block) and he is not yet at the block in the room, he should adopt the goal atBlock(Block).
		if a-goal( holding(Block) ), bel( block(Block, Room), in(Room), not(atBlock(Block)) ) then adopt ( atBlock(Block) ).
		
		% If the agent has the goal holding(Block) and he is currently not in the right room, he should adopt the goal in(Room).
		if a-goal( holding(Block) ), bel( block(Block, Room), not(in(Room)) ) then adopt( in(Room) ).
		
		% If the agent does not have the goal holding(_) already and he is currently not holding anything,
		% 	he adopts the goal holding(Block) for the Block that has the next Color in the sequence.
		if not(goal( holding(_) )), bel( not(holding(_)), nextColorInSeq(Color), color(Block, Color) ) then adopt( holding(Block) ).
		
		% The agent should go to all the rooms that he has not visited yet.
		if a-goal( in(Room) ), bel( visited(Room) ) then goTo(Room).
		
		% The agent should visit all of the rooms (to have a chance to find the required blocks).
		if a-goal( in(Room) ) then goTo(Room).
	}
}

event module {
	program [order=linearall] {
	    % Update the agent's state of movement.
		forall bel( state(State), percept(state(NewState)) ) do delete( state(State) ) + insert( state(NewState) ).
		
		% Record when we are entering or leaving a room.
		forall bel( percept(in(Room)) ) do insert( in(Room) ).
		forall bel( percept(not(in(Room))) ) do delete( in(Room) ).

		% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.
		
		% Record in which area we are
		if bel( at(Place), percept(at(NewPlace)) ) then delete( at(Place) ) + insert( at(NewPlace) ).
		
		% Track the progress of collecting blocks (i.e. the index of the next block to collect in the list)
		if bel( sequenceIndex(M), percept(sequenceIndex(N)) ) then delete( sequenceIndex(M) ) + insert( sequenceIndex(N) ).
		
		% Track which block the gripper is holding
		if bel( percept(holding(Block)) ) then insert( holding(Block) ).
		if bel( percept(not(holding(Block))) ) then delete( holding(Block) ).
		
		% Record when we are at the location of a block
		if bel( percept(atBlock(Block)) ) then insert( atBlock(Block) ).
		if bel( percept(not(atBlock(Block))) ) then delete( atBlock(Block) ).
		
		% Update which rooms are occupied
		forall bel( percept(occupied(Room)) ) do insert( occupied(Room) ).
		forall bel( percept(not(occupied(Room))) ) do delete( occupied(Room) ).
		
		% Remember the color of newly seen blocks
		forall bel( percept(color(Block, Color)) ) do insert( color(Block, Color) ).
		
		
		% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
		% If the agent is not in a Room anymore, he inserts that he already visited that Room.
		if bel( percept(not(in(Room))) ) then insert( visited(Room) ).
		
		% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
		%   knows about a block that can be delivered. (if needed)
		% When an agent is in a room, the agent percepts the colors of the blocks and inserts the corresponding blocks and room in his believes.
		forall bel( in(Room), percept(color(Block, _)) ) do insert( block(Block, Room) ).
		
		% When the agent has collected all of the required blocks, he drops the goal in(Room) so that the agent can terminate itself.
		forall goal(in(Room)), bel( sequenceIndex(N), sequence(M), length(M, N) ) do drop( in(Room) ).
	}
}
